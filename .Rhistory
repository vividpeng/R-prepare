View(acs)
mytable(smoking~age, data=acs)
data("mtcars")
#barplot그리기(막대그래프)
result<-table(mtcars$cyl, mtcars$sm)
View(mtcars)
View(mtcars)
#2
mtcars$sm<-factor(mtcars$am, labels = c("auto","manual"))
#barplot그리기(막대그래프)
result<-table(mtcars$cyl, mtcars$sm)
barplot(result)
mylegend=paste(rownames(result), "cyl")
#barplot그리기(막대그래프)
result<-table(mtcars$cyl, mtcars$sm)
barplot(result)
#barplot그리기(막대그래프)
result<-table(mtcars$cyl, mtcars$sm)
barplot(result)
#barplot그리기(막대그래프)
result<-table(mtcars$cyl, mtcars$sm)
barplot(result)
#깜신 15~18탄.reraltive risk와 odds ratio
install.packages("moonBook")
#Cochran-Amitage (trend) test : trend가 있는 변수에 대하여 결과를 검증할 때(상중하.. 등등의 의미)
require(moonBook)
barplot(result, ylim = c(0,20), legend=rownames(result))
mylegend=paste(rownames(result), "cyl")
barplot(result, ylim = c(0,20), legend=mylegend)
barplot(result, ylim = c(0,20), legend=mylegend, beside = T)
barplot(result, ylim = c(0,20), legend=mylegend, beside=T,horiz = T)
demo("colors") #다양한 색깔의 demo보기.
mycol=c("tan1","coral2","firebrick2")
mycol
barplot(result, ylim = c(0,20), legend=mylegend, beside=T,horiz = T,col=mycol)
result<-table(mtcars$cyl, mtcars$sm)
#Fisher's exact test : 기대도수가 5보다 작은 cell(칸)이 20%이상 일 때
fisher.test(result) #p<0.05이므로 두 변수는 연관성이 있다고 할 수 있다.
#총합을 table에 추가하기
addmargins(result)
#paired t-test: 정규분포o
pd<-read.csv("pairedData.csv",header = T)
library(readr)
pairedData <- read_csv("D:/Code/R-prepare/pairedData.csv")
View(pairedData)
pairedData
#깜신20~21탄.짝을 이루는 data.(a약을 먹었을 때와 b약을 먹었을 때 효과 차이, 성형 전후 자존감 차이 등)
install.packages("tidyr")
library("tidyr")
pd2<-gather(pd, key = "group", value = "result", -ID)
pd<-pairedData
pd2<-gather(pd, key = "group", value = "result", -ID)
View(pd)
View(pd2)
View(pd2)
pd2<-gather(pd, key = "group", value = "result")
pd2<-gather(pd, key = "group", value = "result",-ID)
View(pd2)
View(pd2)
shapiro.test(pd2$result[pd2$group=="before"])
shapiro.test(pd2$result[pd2$group=="after"])
shapiro.test(pd2$result[pd2$group=="After"])
d
d<-pd2$result[pd2$group=="before"]-pd2$result[pd2$group=="After"]
d
shapiro.test(d)
d<-pd2$result[pd2$group=="After"]-pd2$result[pd2$group=="before"]
shapiro.test(d)
shapiro.test(acs$age[acs$sex=="Male"])
shapiro.test(acs$age[acs$sex=="Female"])
install.packages("PairedData")
library(PairedData)
#paire t를 하기 위해서는 wide type을 long type data로 만들어야됨.
library(tidyr)
B<-subset(pd2, group=="before", RESULT, drop = T)
B<-subset(pd2, group=="before", result, drop = T)
A<-subset(pd2, group=="After", result, drop = T)
a<-subset(pd2, group=="After", result, drop = T)
b<-subset(pd2, group=="before", result, drop = T)
b
b<-subset(pd2, group=="before", result)
b
b<-subset(pd2, group=="before", result, drop = T)
pd3<-paired(b,a)
pd3
plot(pd3, type="profile")+theme_bw()
t.test(result~group,data = pd2, paired=T)
#wilcoxon signed rank test: 정규분포 x or 서열변수.
data(sleep)
head(sleep)
#세그룹이상.
#(one way)repeated measures ANOVA: 정규분포o
ow<-read.csv("onewaySample.csv", header =T)
setwd("D:/Code/R-prepare")
#세그룹이상.
#(one way)repeated measures ANOVA: 정규분포o
ow<-read.csv("onewaySample.csv", header =T)
View(ow)
View(ow)
ow<-ow[,2:6]#열지우기
View(ow)
View(ow)
install.packages("gplot")
means<-c(means(ow$score0),means(ow$score1),means(ow$score3),means(ow$score6))
means<-c(mean(ow$score0),mean(ow$score1),mean(ow$score3),mean(ow$score6))
means
library(gplots)
install.packages("gplots")
library(gplots)
plot
help(plot)
plotCI(x=means, type = "l", ylab = "score", xlab = "month")
means
plotCI(x=means, type = "l", ylab = "score", xlab = "month", main="one way test")
plotCI(x=means, type = "l", ylab = "score", xlab = "month", main="One way test")
multmodel<-lm(cbind(ow$score0,ow$score1,ow$score3,ow$score6)~1)
View(multmodel)
View(multmodel)
help(lm)
multmodel
trials<-factor(c("score0","score1","score3","score6"),ordered=F)
trials
model1<- anova(multmodel, idata=data.frame(trials), idesign= ~trials, type="III")
install.packages("car")
library(car)
model1<- Anova(multmodel, idata=data.frame(trials), idesign= ~trials, type="III")
summary(model1, multivariate = F)
PP
#사후검정 (3개에상의 데이터에서 어느구간이 유의미한지 확인하기)
library(tidyr)
owlong<-gather(ow, key = "ID", value = "score",-ID)#long type으로
owlong<-gather(ow, key = "ID", value = "score")#long type으로
owlong<-owlong[8:35,]
View(owlong)
View(ow)
View(ow)
View(owlong)
View(owlong)
View(ow)
View(ow)
View(owlong)
View(owlong)
owlong<-gather(ow, key = "ID", value = "score")#long type으로
View(owlong)
View(owlong)
owlong<-owlong[8:35,] #ID값 뺌뺌
out<-aov(score~ID,data=owlong)
shapiro.test(resid(out))
TukeyHSD(out)
#표준오차(standard error구하기)
se=<-sd(owLong$score)/sqrt(length(owLong$score))
#표준오차(standard error구하기)
se<-sd(owLong$score)/sqrt(length(owLong$score))
#표준오차(standard error구하기)
se<-sd(owlong$score)/sqrt(length(owLong$score))
#표준오차(standard error구하기)
se<-sd(owlong$score)/sqrt(length(owlong$score))
plotCI(x=means, uiw=se, type = "l", ylab = "score", xlab = "month", main="One way test")
#Friedman test: 정규분포 x or 서열변수.
?friedman.test
RoundingTimes <-
matrix(c(5.40, 5.50, 5.55,
5.85, 5.70, 5.75,
5.20, 5.60, 5.50,
5.55, 5.50, 5.40,
5.90, 5.85, 5.70,
5.45, 5.55, 5.60,
5.40, 5.40, 5.35,
5.45, 5.50, 5.35,
5.25, 5.15, 5.00,
5.85, 5.80, 5.70,
5.25, 5.20, 5.10,
5.65, 5.55, 5.45,
5.60, 5.35, 5.45,
5.05, 5.00, 4.95,
5.50, 5.50, 5.40,
5.45, 5.55, 5.50,
5.55, 5.55, 5.35,
5.45, 5.50, 5.55,
5.50, 5.45, 5.25,
5.65, 5.60, 5.40,
5.70, 5.65, 5.55,
6.30, 6.30, 6.25),
nrow = 22,
byrow = TRUE,
dimnames = list(1 : 22,
c("Round Out", "Narrow Angle", "Wide Angle")))
View(RoundingTimes)
write.csv(RoundingTimes,file"friedman.csv")
write.csv(RoundingTimes, file="friedman.csv")
RT<-read.csv("RT.csv", header =T)
View(RT)
View(RT)
RT<-RT[,2:4]
View(RT)
View(RT)
install.packages("reshape")
library(reshape)
RT2<-melt(RT)
View(RT2)
View(RT2)
out<-aov(value~x2,data=RT2)
out<-aov(value~X2,data=RT2)
View(RT)
View(RT)
View(RoundingTimes)
View(RoundingTimes)
rt3<-melt(RoundingTimes)
View(rt3)
View(RT2)
View(RT2)
View(rt3)
View(rt3)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =T) #?friedman.test에서 가져온 데이터임.
RT2<-melt(RT)
View(RT2)
View(RT2)
View(rt3)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =F) #?friedman.test에서 가져온 데이터임.
View(RT)
View(RT)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =F) #?friedman.test에서 가져온 데이터임.
RT<-RT[,2:4]
View(RoundingTimes)
View(RoundingTimes)
View(rt3)
View(RT2)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =F) #?friedman.test에서 가져온 데이터임.
RT<-RT[,2:4]
RT2<-melt(RT)
View(RT2)
View(RT2)
RT2<-melt(RT)
View(RT2)
View(RT2)
View(RT2)
View(RT2)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =T) #?friedman.test에서 가져온 데이터임.
RT<-RT[,2:4]
RT2<-melt(RT)
out<-aov(value~variables,data=RT2)
View(RT2)
View(RT2)
out<-aov(value~variable,data=RT2)
out
shapiro.test(resid(out))
boxplot(value~variable, data=RT2)
friedman.test(RT)
View(RT)
View(RT)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =T) #?friedman.test에서 가져온 데이터임.
friedman.test(RT)
View(RT)
View(RT)
View(RoundingTimes)
View(RoundingTimes)
?friedman.test
friedman.test(RT, x)
friedman.test(RT, X)
head(RT)
friedman.test(RoundingTimes)
mode(RT)
mode(RoundingTimes)
RT<-RT[,2:4]
View(RT)
View(RT)
mode(RT)
as.numeric(RT)
View(RT)
View(RT)
as.double(RT)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =T) #?friedman.test에서 가져온 데이터임.
as.double(RT[,1])
as.numeric(RT[,1])
friedman.test(RT)#?friedman.test에 있는 함수.
friedman.test(RT,X)#?friedman.test에 있는 함수.
friedman.test(RT,RT[,1])#?friedman.test에 있는 함수.
View(RT)
View(RT)
View(RoundingTimes)
View(RoundingTimes)
asmatrix(RT)
as.matrix(RT)
View(RT)
View(RT)
RT<-RT[,2:4]
as.matrix(RT)
mode(RT)
mode(RoundingTimes)
as.matrix(RT)
friedman.test(RT)#?friedman.test에 있는 함수.
friedman.test(as.matrix(RT))#?friedman.test에 있는 함수.
IS()
Is()
ls()
install.packages("coin")
#사후검정해야됨.
library(coin)
friedman.test.with.post.hoc <- function(formu, data, to.print.friedman = T, to.post.hoc.if.signif = T,  to.plot.parallel = T, to.plot.boxplot = T, signif.P = .05, color.blocks.in.cor.plot = T, jitter.Y.in.cor.plot =F)
{
# formu is a formula of the shape: 	Y ~ X | block
# data is a long data.frame with three columns:    [[ Y (numeric), X (factor), block (factor) ]]
# Note: This function doesn't handle NA's! In case of NA in Y in one of the blocks, then that entire block should be removed.
# Loading needed packages
if(!require(coin))
{
print("You are missing the package 'coin', we will now try to install it...")
install.packages("coin")
library(coin)
}
if(!require(multcomp))
{
print("You are missing the package 'multcomp', we will now try to install it...")
install.packages("multcomp")
library(multcomp)
}
if(!require(colorspace))
{
print("You are missing the package 'colorspace', we will now try to install it...")
install.packages("colorspace")
library(colorspace)
}
# get the names out of the formula
formu.names <- all.vars(formu)
Y.name <- formu.names[1]
X.name <- formu.names[2]
block.name <- formu.names[3]
if(dim(data)[2] >3) data <- data[,c(Y.name,X.name,block.name)]	# In case we have a "data" data frame with more then the three columns we need. This code will clean it from them...
# Note: the function doesn't handle NA's. In case of NA in one of the block T outcomes, that entire block should be removed.
# stopping in case there is NA in the Y vector
if(sum(is.na(data[,Y.name])) > 0) stop("Function stopped: This function doesn't handle NA's. In case of NA in Y in one of the blocks, then that entire block should be removed.")
# make sure that the number of factors goes with the actual values present in the data:
data[,X.name ] <- factor(data[,X.name ])
data[,block.name ] <- factor(data[,block.name ])
number.of.X.levels <- length(levels(data[,X.name ]))
if(number.of.X.levels == 2) { warning(paste("'",X.name,"'", "has only two levels. Consider using paired wilcox.test instead of friedman test"))}
# making the object that will hold the friedman test and the other.
the.sym.test <- symmetry_test(formu, data = data,	### all pairwise comparisons
teststat = "max",
xtrafo = function(Y.data) { trafo( Y.data, factor_trafo = function(x) { model.matrix(~ x - 1) %*% t(contrMat(table(x), "Tukey")) } ) },
ytrafo = function(Y.data){ trafo(Y.data, numeric_trafo = rank, block = data[,block.name] ) }
)
# if(to.print.friedman) { print(the.sym.test) }
if(to.post.hoc.if.signif)
{
if(pvalue(the.sym.test) < signif.P)
{
# the post hoc test
The.post.hoc.P.values <- pvalue(the.sym.test, method = "single-step")	# this is the post hoc of the friedman test
# plotting
if(to.plot.parallel & to.plot.boxplot)	par(mfrow = c(1,2)) # if we are plotting two plots, let's make sure we'll be able to see both
if(to.plot.parallel)
{
X.names <- levels(data[, X.name])
X.for.plot <- seq_along(X.names)
plot.xlim <- c(.7 , length(X.for.plot)+.3)	# adding some spacing from both sides of the plot
if(color.blocks.in.cor.plot)
{
blocks.col <- rainbow_hcl(length(levels(data[,block.name])))
} else {
blocks.col <- 1 # black
}
data2 <- data
if(jitter.Y.in.cor.plot) {
data2[,Y.name] <- jitter(data2[,Y.name])
par.cor.plot.text <- "Parallel coordinates plot (with Jitter)"
} else {
par.cor.plot.text <- "Parallel coordinates plot"
}
# adding a Parallel coordinates plot
matplot(as.matrix(reshape(data2,  idvar=X.name, timevar=block.name,
direction="wide")[,-1])  ,
type = "l",  lty = 1, axes = FALSE, ylab = Y.name,
xlim = plot.xlim,
col = blocks.col,
main = par.cor.plot.text)
axis(1, at = X.for.plot , labels = X.names) # plot X axis
axis(2) # plot Y axis
points(tapply(data[,Y.name], data[,X.name], median) ~ X.for.plot, col = "red",pch = 4, cex = 2, lwd = 5)
}
if(to.plot.boxplot)
{
# first we create a function to create a new Y, by substracting different combinations of X levels from each other.
subtract.a.from.b <- function(a.b , the.data)
{
the.data[,a.b[2]] - the.data[,a.b[1]]
}
temp.wide <- reshape(data,  idvar=X.name, timevar=block.name,
direction="wide") 	#[,-1]
wide.data <- as.matrix(t(temp.wide[,-1]))
colnames(wide.data) <- temp.wide[,1]
Y.b.minus.a.combos <- apply(with(data,combn(levels(data[,X.name]), 2)), 2, subtract.a.from.b, the.data =wide.data)
names.b.minus.a.combos <- apply(with(data,combn(levels(data[,X.name]), 2)), 2, function(a.b) {paste(a.b[2],a.b[1],sep=" - ")})
the.ylim <- range(Y.b.minus.a.combos)
the.ylim[2] <- the.ylim[2] + max(sd(Y.b.minus.a.combos))	# adding some space for the labels
is.signif.color <- ifelse(The.post.hoc.P.values < .05 , "green", "grey")
boxplot(Y.b.minus.a.combos,
names = names.b.minus.a.combos ,
col = is.signif.color,
main = "Boxplots (of the differences)",
ylim = the.ylim
)
legend("topright", legend = paste(names.b.minus.a.combos, rep(" ; PostHoc P.value:", number.of.X.levels),round(The.post.hoc.P.values,5)) , fill =  is.signif.color )
abline(h = 0, col = "blue")
}
list.to.return <- list(Friedman.Test = the.sym.test, PostHoc.Test = The.post.hoc.P.values)
if(to.print.friedman) {print(list.to.return)}
return(list.to.return)
}	else {
print("The results where not significant, There is no need for a post hoc test")
return(the.sym.test)
}
}
# Original credit (for linking online, to the package that performs the post hoc test) goes to "David Winsemius", see:
# http://tolstoy.newcastle.edu.au/R/e8/help/09/10/1416.html
}
View(RT2)
View(RT2)
RT2<-melt(as.metrix(RT))
View(RT2)
View(RT2)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =T) #?friedman.test에서 가져온 데이터임.
View(RT)
View(RT)
RT2<-melt(as.metrix(RT))
View(RT2)
View(RT2)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =T) #?friedman.test에서 가져온 데이터임.
RT2<-melt(as.metrix(RT))
View(RT)
View(RT)
View(RT2)
View(RT2)
RT2<-melt(RT)
View(RT2)
View(RT2)
RT<-RT[,2:4]
RT2<-melt(RT)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =T) #?friedman.test에서 가져온 데이터임.
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =T) #?friedman.test에서 가져온 데이터임.
View(RT)
View(RT)
RT2<-melt(RT)
View(RT2)
View(RT2)
?melt
RT2<-melt.list(RT)
View(RT2)
View(RT2)
#Friedman test: 정규분포 x or 서열변수.
RT<-read.csv("RT.csv", header =T) #?friedman.test에서 가져온 데이터임.
View(RT)
View(RT)
RT<-RT[,2:4]
RT2<-melt.list(RT)
View(rt3)
View(RT2)
View(RT2)
friedman.test.with.post.hoc(value~variable | , RT2)
friedman.test.with.post.hoc(value~variable, RT2)
rt3<-melt(RoundingTimes)
friedman.test.with.post.hoc(value~x2 | x1, rt3)
friedman.test.with.post.hoc(value~X2 | X1, rt3)
#two way repeated measures ANOVA
acne<-read.csv("10_rmanova.csv",header=T)
View(acs)
View(acs)
View(acne)
View(acne)
acL<-reshape(acne, direction ="long",varying = 3:6, sep="")
View(acL)
View(acL)
acL<-reshape(acne, direction ="long",varying = 3:6, sep="")
#two way repeated measures ANOVA
acne<-read.csv("10_rmanova.csv",header=T)
acL<-reshape(acne, direction ="long",varying = 3:6, sep="")
View(acL)
View(acL)
View(acne)
View(acne)
str(aCL)
str(acL)
acL$group<-factor(acL$group)
acL$id<-factor(acL$id)
acL$time<-factor(acL$time)
str(acL)
interaction.plot(acL$time,acL$group,acL$month)
acD<-aov(month~group*time+Error(id),data=acL)
summary(acD)
View(acL)
View(acL)
View(acD)
View(acD)
acL0<-acL[acL$time=="0",]
acL1<-acL[acL$time=="1",]
acL3<-acL[acL$time=="3",]
acL6<-acL[acL$time=="6",]
t.test(month~group, data=acL0)
t.test(month~group, data=acL1)
t.test(month~group, data=acL3)
t.test(month~group, data=acL6)
